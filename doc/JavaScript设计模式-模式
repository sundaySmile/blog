##### 模式的定义
模式是一种可复用的解决方案，可用于解决软件设计中遇到的常见问题；  
模式是将解决问题的方法制作成模板，并且这些模板可应用于多种不同的情况；  

#### 设计模式的好处
   + 模式是已经验证的解决方案。它们为解决软件开发中遇到的问题提供可靠的方法
   + 模式很容易被复用。模式通常是指一种立即可用的解决方案，可以对其进行修改以满足个人需求。
   + 模式富有表达力。看到模式是，通常就表示有一个设置好的结构和表达解决方案的词汇，以帮助我们非常轻松地表达出所实现的大型解决方案。  
   
但是，模式不是一种确切的解决方案。它无法解决所有的设计问题，也无法取代优秀软件设计师的工作，但模式确实能支持这些工作。


模式的其他优点：
---
- 复用模式有助于防止在应用程序开发过程中小问题引发大问题
- 模式可以提供通用的解决方案，并且其记录方式不需求与某个特定问题挂钩
- 某些模式确实能够通过避免代码复用来减少代码的总体资源占用量。
- 模式添加到开发人员的词汇中，会使沟通更快速
- 经常使用的模式可以逐步改进，因为其他开发人员使用这些模式后总结出的共同经验有贡献给了设计模式社区


#### 设计模式类别

###### 1、创建型设计模式
> 创建型设计模式专注于处理`对象创建机制`，以适合给定情况的方式来创建对象。  

属于这个类别的模式包括: Constructor(构造器)、 Factory（工厂）、Abstract（抽象）、Prototype（原型）、Singleton（单例）和Builder（生成器）。  

###### 2、结构性设计模式
> 结构性设计模式与对象组合有关，通常可以用于找出在不同对象之间建立关系对的简单方法。。  

属于这个类别的模式包括: Decorator(装饰者）、 Facade（外观）、Flyweight（享元）、Adapter（适配器）、Proxy（代理）。  

###### 3、行为设计模式
> 行为设计模式专注于改善或简化系统中不同对象之间的`通信`。  

属于这个类别的模式包括: Iterator(迭代器)、 Mediator（中介者）、Observer（观察者）、Visitor（访问者））。  


